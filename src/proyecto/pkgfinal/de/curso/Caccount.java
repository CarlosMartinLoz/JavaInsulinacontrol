/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package proyecto.pkgfinal.de.curso;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;

/**
 *
 * @author User21
 */
public class Caccount extends javax.swing.JDialog {
    private int limit = 8;
    private PreparedStatement stmt;
    private Statement st;
    private String url = "jdbc:mysql://192.168.1.215:3306/insulina";
    private String user = "root";
    private String passdb = "";

    /**
     * Creates new form NewJDialog
     */
    public Caccount(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
        setLocationRelativeTo(parent);
        setVisible(true);
        this.pack();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        usuario = new javax.swing.JTextField();
        password = new javax.swing.JPasswordField();
        aceptar = new javax.swing.JButton();
        salir = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        usuario.setText("");
        usuario.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                usuarioKeyTyped(evt);
            }
        });

        password.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                passwordKeyTyped(evt);
            }
        });

        aceptar.setText("Aceptar");
        aceptar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                aceptarActionPerformed(evt);
            }
        });

        salir.setText("Salir");
        salir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                salirActionPerformed(evt);
            }
        });

        jLabel1.setText("Usuario");

        jLabel2.setText("Contraseña");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(29, 29, 29)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 67, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(password, javax.swing.GroupLayout.PREFERRED_SIZE, 162, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 37, Short.MAX_VALUE)
                        .addComponent(usuario, javax.swing.GroupLayout.PREFERRED_SIZE, 162, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addComponent(aceptar, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(salir, javax.swing.GroupLayout.PREFERRED_SIZE, 126, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(12, 12, 12)))
                .addGap(47, 47, 47))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(74, 74, 74)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(usuario, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(54, 54, 54)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(password, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 59, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(aceptar)
                    .addComponent(salir))
                .addGap(50, 50, 50))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void aceptarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_aceptarActionPerformed
        // TODO add your handling code here:
        /*Se inicia la conexión con Connection se utiliza resulset y prepare statement 
        para ejecutar el query .La contraseña y el usuario deben estar cifrados en la base de 
        datos de manera que se cifra antes de ello
        
        */
        Connection cn;
        ResultSet rs;
        Cifrar cusuario = new Cifrar();
        Cifrar ccontra = new Cifrar();
        //String auxiliares
        String pass;
        String usuariocifra;

        int id = 0;
        char[] passarray;
        passarray = password.getPassword();
        pass = new String(passarray);
        //la contraseña y el usuario deben tener un mínimo de 4 caracteres
        if (usuario.getText().length() >= 4 && pass.length() >= 4) {
            try {
                //inicio del driver
                Class.forName("com.mysql.jdbc.Driver");

            } catch (ClassNotFoundException ex) {
                Logger.getLogger(Caccount.class.getName()).log(Level.SEVERE, null, ex);
            }
            try {
                usuariocifra = cusuario.cifrar(usuario.getText());
                cn = DriverManager.getConnection(url, user, passdb);
                stmt = cn.prepareStatement("SELECT usuario FROM usuarios WHERE usuario =?");
                stmt.setString(1, usuariocifra);
                rs = stmt.executeQuery();
                
                /*Se ejecuta el primer query para saber si hay más usuarios con el mismo nick
                Para saberlo se utiliza rs.next que si devuelve false significara que no hay otro
                nickname igual en la BBDD.
                */
                
                if (!rs.next()) {
                    
                    stmt = cn.prepareStatement("SELECT id,MAX(id) FROM usuarios");
                    rs = stmt.executeQuery();
                    
                    /*Se hace una segunda sentencia para obtener el último id que será nuestra llave
                    foranea en caso de que haya algún registro se ejecutará el if, en caso contrario
                    el else, si se ejecuta el else significa que será el primer registro de la tabla
                    */
                    if (rs.next()) {
                        
                        id = rs.getInt("MAX(id)");
                        
                        
                        
                        stmt = cn.prepareStatement("INSERT INTO usuarios (usuario,contraseña,id) VALUES(?,?,?)");
                        stmt.setString(1, cusuario.cifrar(usuario.getText()));
                        stmt.setString(2, ccontra.cifrar(pass));

                        stmt.setInt(3,id+1);
                        stmt.executeUpdate();
                        stmt.close();
                        cn.close();
                        JOptionPane.showMessageDialog(this,"Registro completado satisfactoriamente","Registro completado",JOptionPane.INFORMATION_MESSAGE);
                        dispose();
                    } else {
                        //en caso de primer registro
                        stmt = cn.prepareStatement("INSERT INTO usuarios (usuario,contraseña,id) VALUES(?,?,?)");
                        stmt.setString(1, usuariocifra);
                        stmt.setString(2, ccontra.cifrar(pass));
                        stmt.setInt(3, id + 1);
                        stmt.executeUpdate();
                        stmt.close();
                        cn.close();
                        JOptionPane.showMessageDialog(this,"Registro completado satisfactoriamente","Registro completado",JOptionPane.INFORMATION_MESSAGE);
                        dispose();
                        

                    }
                }else{
                     JOptionPane.showMessageDialog(this,"Introduzca otro nombre de usuario","Nombre de usuario ya registrado",JOptionPane.INFORMATION_MESSAGE);
                     rs.close();
                     stmt.close();
                     cn.close();
                }
            } catch (SQLException ex) {
                JOptionPane.showMessageDialog(this,"Error de conexión","Error",JOptionPane.INFORMATION_MESSAGE);
                Logger.getLogger(Caccount.class.getName()).log(Level.SEVERE, null, ex);
            }
        }


    }//GEN-LAST:event_aceptarActionPerformed

    private void usuarioKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_usuarioKeyTyped
        //Se limita el número de caracteres
        if(usuario.getText().length()>=limit){
            evt.consume();
        }
    }//GEN-LAST:event_usuarioKeyTyped

    private void passwordKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_passwordKeyTyped
        // Se limita el número de caracteres
        if(password.getPassword().length>=limit){
            evt.consume();
        }
    }//GEN-LAST:event_passwordKeyTyped

    private void salirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_salirActionPerformed
        // TODO add your handling code here:
        dispose();
    }//GEN-LAST:event_salirActionPerformed

 

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton aceptar;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPasswordField password;
    private javax.swing.JButton salir;
    private javax.swing.JTextField usuario;
    // End of variables declaration//GEN-END:variables
}
